/*
 * This file is generated by jOOQ.
 */
package org.yagi.motel.model.dsl.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.yagi.motel.model.dsl.DefaultSchema;
import org.yagi.motel.model.dsl.Keys;
import org.yagi.motel.model.dsl.tables.records.StateRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class State extends TableImpl<StateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>state</code>
     */
    public static final State STATE = new State();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StateRecord> getRecordType() {
        return StateRecord.class;
    }

    /**
     * The column <code>state.id</code>.
     */
    public final TableField<StateRecord, Byte> ID = createField(DSL.name("id"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>state.is_processed_enable</code>.
     */
    public final TableField<StateRecord, Byte> IS_PROCESSED_ENABLE = createField(DSL.name("is_processed_enable"), SQLDataType.TINYINT, this, "");

    private State(Name alias, Table<StateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private State(Name alias, Table<StateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>state</code> table reference
     */
    public State(String alias) {
        this(DSL.name(alias), STATE);
    }

    /**
     * Create an aliased <code>state</code> table reference
     */
    public State(Name alias) {
        this(alias, STATE);
    }

    /**
     * Create a <code>state</code> table reference
     */
    public State() {
        this(DSL.name("state"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<StateRecord> getPrimaryKey() {
        return Keys.STATE__PK_STATE;
    }

    @Override
    public State as(String alias) {
        return new State(DSL.name(alias), this);
    }

    @Override
    public State as(Name alias) {
        return new State(alias, this);
    }

    @Override
    public State as(Table<?> alias) {
        return new State(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(String name) {
        return new State(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(Name name) {
        return new State(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(Table<?> name) {
        return new State(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public State where(Condition condition) {
        return new State(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public State where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public State where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public State where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public State where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public State where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public State where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public State where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public State whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public State whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
